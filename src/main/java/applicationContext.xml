<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <!-- EX #1a: Use a normal <bean/> with a precompiled Groovy object -->
    <!--         (Use CompiledGroovyPdfGenerator or SimpleCompiledGroovyPdfGenerator) -->
    <bean id="pdfGenerator"
        class="com.nearinfinity.service.impl.CompiledGroovyPdfGenerator">
        <property name="companyName" value="Groovy Bookstore"/>
    </bean>

    <!-- EX #1b: Use Spring 2.5 component scanning with a precompiled Groovy object -->
<!--
    <context:annotation-config/>
    <context:component-scan base-package="com.nearinfinity.service"/>

    <bean id="companyName" class="java.lang.String">
        <qualifier value="companyName"/>
        <constructor-arg value="Annotated Groovy Store"/>
    </bean>
-->

    <!-- EX #2: Manually define Groovy bean using GroovyScriptFactory and a ScriptFactoryPostProcessor. -->
<!--
    <bean id="pdfGenerator" class="org.springframework.scripting.groovy.GroovyScriptFactory">
        <constructor-arg value="classpath:com/nearinfinity/service/impl/GroovyPdfGenerator.groovy"/>
        <property name="companyName" value="Groovier Bookstore"/>
    </bean>
    <bean class="org.springframework.scripting.support.ScriptFactoryPostProcessor"/>
-->


    <!-- EX #3a: Use <lang:groovy/> with a classpath-based Groovy script -->
<!--
    <lang:groovy id="pdfGenerator"
        script-source="classpath:com/nearinfinity/service/impl/GroovyPdfGenerator.groovy">
        <lang:property name="companyName" value="Really Groovy Bookstore"/>
    </lang:groovy>
-->

    <!-- EX #3b: Use <lang:groovy/> with a classpath-based Groovy script -->
<!--
    <lang:groovy id="pdfGenerator"
        script-source="classpath:com/nearinfinity/service/impl/SwitchableGroovyPdfGenerators.groovy">
        <lang:property name="companyName" value="Switchable Groovy Bookstore"/>
    </lang:groovy>
-->


    <!-- EX #4: Use <lang:groovy/> with a classpath-based Groovy script and auto-refresh -->
<!--
    <lang:groovy id="pdfGenerator"
        refresh-check-delay="5000"
        script-source="classpath:com/nearinfinity/service/impl/GroovyPdfGenerator.groovy">
        <lang:property name="companyName" value="Really Groovy Bookstore"/>
    </lang:groovy>
-->


    <!-- EX #5: Use <lang:groovy/> with an inline script -->
<!--
    <lang:groovy id="pdfGenerator">
        <lang:inline-script>
            <![CDATA[
package com.nearinfinity.service.impl

import com.lowagie.text.Chunk
import com.lowagie.text.Document
import com.lowagie.text.Element
import com.lowagie.text.Font
import com.lowagie.text.PageSize
import com.lowagie.text.Paragraph
import com.lowagie.text.Phrase
import com.lowagie.text.Rectangle
import com.lowagie.text.pdf.PdfPCell
import com.lowagie.text.pdf.PdfPTable
import com.lowagie.text.pdf.PdfWriter
import com.nearinfinity.model.Invoice
import com.nearinfinity.service.PdfGenerator
import java.awt.Color
import java.text.NumberFormat
import java.text.SimpleDateFormat


/**
 * This Groovy implementation class is used in the examples where we use Groovy scripts.
 */
class GroovyPdfGenerator implements PdfGenerator {

  String companyName

  public byte[] pdfFor(Invoice invoice) {
    Document document = new Document(PageSize.LETTER)
    ByteArrayOutputStream output = new ByteArrayOutputStream()
    PdfWriter.getInstance(document, output)
    document.open()

    Font headerFont = new Font(family: Font.HELVETICA, size: 24.0, style: Font.ITALIC)
    Paragraph headerParagraph = new Paragraph(companyName, headerFont)
    headerParagraph.setSpacingAfter(16)
    document.add(headerParagraph)

    addLabelValuePair(document, "Order number", invoice.orderNumber)
    addLabelValuePair(document, "Order date", formatDate(invoice.orderDate))

    PdfPTable table = new PdfPTable(1, 6, 1)
    table.setHorizontalAlignment(Element.ALIGN_LEFT)
    table.setWidthPercentage(100)
    table.setSpacingBefore(12)
    addHeaderCell(table, "Qty")
    addHeaderCell(table, "Description")
    addHeaderCell(table, "Price")
    invoice.lineItems.each {lineItem ->
      table.addCell(lineItem.quantity.toString())
      table.addCell(lineItem.description)
      table.addCell(formatPrice(lineItem.price))
    }

    PdfPCell totalLabelCell = new PdfPCell(new Phrase("Total:", boldFont()))
    totalLabelCell.setColspan(2)
    totalLabelCell.setHorizontalAlignment(Element.ALIGN_RIGHT)
    totalLabelCell.setPaddingRight(5)
    totalLabelCell.setBorder(Rectangle.NO_BORDER)
    table.addCell(totalLabelCell)

    PdfPCell totalCell = new PdfPCell(new Phrase(formatPrice(invoice.total), boldFont()))
    totalCell.setBorder(Rectangle.NO_BORDER)
    table.addCell(totalCell)

    document.add(table)
    document.close()
    return output.toByteArray()
  }

  def addHeaderCell(table, text) {
    PdfPCell cell = new PdfPCell(new Paragraph(text, boldFont()))
    cell.setBackgroundColor(Color.LIGHT_GRAY)
    cell.setVerticalAlignment(Element.ALIGN_MIDDLE)
    cell.setPadding(2)
    table.addCell(cell)
  }

  def boldFont() {
    return new Font(style: Font.BOLD)
  }

  def addLabelValuePair(document, label, value) {
    Chunk labelChunk = new Chunk("$label: ", boldFont())
    Chunk valueChunk = new Chunk("$value")
    Paragraph paragraph = new Paragraph()
    paragraph.add(labelChunk)
    paragraph.add(valueChunk)
    document.add(paragraph)
  }

  def formatPrice(price) {
    NumberFormat.getCurrencyInstance(Locale.US).format(price)
  }

  def formatDate(date) {
    new SimpleDateFormat("MM/dd/yyyy h:mm a").format(date)
  }

}
            ]]>
        </lang:inline-script>
    </lang:groovy>
-->


    <!-- EX #6: Add a GroovyObjectCustomizer -->
<!--
    <bean id="performanceLoggingCustomizer"
        class="com.nearinfinity.spring.scripting.groovy.PerformanceLoggingCustomizer"/>

    <lang:groovy id="pdfGenerator"
        refresh-check-delay="5000"
        script-source="classpath:com/nearinfinity/service/impl/GroovyPdfGenerator.groovy"
        customizer-ref="performanceLoggingCustomizer">
        <lang:property name="companyName" value="Customized Groovy Bookstore"/>
    </lang:groovy>
-->
    

    <!-- EX #7: Use <lang:groovy/> with a database-based Groovy script -->
<!--
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/groovierspring"/>
        <property name="username" value="groovierspring"/>
        <property name="password" value="groovy"/>
    </bean>

    <bean id="scriptFactoryPostProcessor" class="com.nearinfinity.spring.scripting.support.CustomScriptFactoryPostProcessor">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <lang:groovy id="pdfGenerator"
        refresh-check-delay="5000"
        script-source="database:com/nearinfinity/service/impl/GroovyPdfGenerator.groovy">
        <lang:property name="companyName" value="Database Groovy Bookstore"/>
    </lang:groovy>
-->

    <!--
         In example #7 above, we define bean named 'scriptFactoryPostProcessor' which <lang:groovy/> uses under the covers (actually
         ScriptBeanDefinitionParser uses it if present) in order to load from the database as well as the default
         methods Spring supports using Resource (e.g. classpath, inline, file). This ensures that Spring uses
         our custom post processor which knows how to pull scripts from a database using the "database:" "protocol."

         We also define a DataSource to provide it to CustomScriptFactoryPostProcessor.
    -->

</beans>
